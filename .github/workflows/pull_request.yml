# This workflow will install Python dependencies, run tests and lint with a single version of Python. Note that this
# will only run when we open a `pull request`.
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions
# and https://dev.to/petrsvihlik/using-environment-protection-rules-to-secure-secrets-when-building-external-forks-with-pullrequesttarget-hci

name: Build & Test for Pull Requests

on:
  pull_request_target:
    branches: [ master ]

jobs:
  approve:
    runs-on: ubuntu-latest
    steps:
      - name: Approve
        run: echo For security reasons, all pull requests need to be approved first before running any automated CI.
  pylint:
    runs-on: ubuntu-latest
    needs: [ approve ]
    environment:
      name: GitHub Actions
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python 3.9
        uses: actions/setup-python@v2
        with:
          python-version: 3.9
      - name: Cache pip
        uses: actions/cache@v2
        with:
          # This path is specific to Ubuntu
          path: ~/.cache/pip
          # Look to see if there is a cache hit for the corresponding requirements file
          key: ${{ runner.os }}-pip-${{ hashFiles('dev-requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
            ${{ runner.os }}-
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r dev-requirements.txt
      - name: Lint with pylint
        run: |
          pylint --load-plugins pylint_django --django-settings-module=begintoreason_django.settings accounts/ core/ data_analysis/ educator/ think_aloud/ tutor/
  build:
    runs-on: ubuntu-latest
    needs: [ approve ]
    environment:
      name: GitHub Actions
    strategy:
      # You can use PyPy versions in python-version.
      # For example, pypy2 and pypy3
      matrix:
        python-version: [ 3.6, 3.7, 3.8, 3.9 ]
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      # You can test your matrix by printing the current Python version
      - name: Display Python version
        run: python -c "import sys; print(sys.version)"
      - name: Cache pip
        uses: actions/cache@v2
        with:
          # This path is specific to Ubuntu
          path: ~/.cache/pip
          # Look to see if there is a cache hit for the corresponding requirements file
          key: ${{ runner.os }}-pip-${{ hashFiles('dev-requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
            ${{ runner.os }}-
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r dev-requirements.txt
      - name: Create .env file for GitHub Actions
        uses: weyheyhey/create-dotenv-action@v1
        env:
          ^DJANGO_SETTINGS_MODULE: "${{ secrets.DJANGO_SETTINGS_MODULE }}"
          ^SECRET_KEY: "${{ secrets.SECRET_KEY }}"
          ^SOCIAL_AUTH_GOOGLE_OAUTH2_KEY: "${{ secrets.SOCIAL_AUTH_GOOGLE_OAUTH2_KEY }}"
          ^SOCIAL_AUTH_GOOGLE_OAUTH2_SECRET: "${{ secrets.SOCIAL_AUTH_GOOGLE_OAUTH2_SECRET }}"
      - name: Test with pytest
        run: |
          python manage.py makemigrations accounts core data_analysis educator think_aloud tutor
          python manage.py migrate
          python manage.py test accounts core data_analysis educator think_aloud tutor
